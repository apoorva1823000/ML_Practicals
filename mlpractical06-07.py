# -*- coding: utf-8 -*-
"""ParkinsonsPredictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xx81xe-ES9g6rjVrRz4X4zlhUYxMC-8v

Importing the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn import svm
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

#Prompt to install Kaggle
!pip install kaggle

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d thecansin/parkinsons-data-set
!unzip parkinsons-data-set.zip

prk_data = pd.read_csv('/content/parkinsons.data')

prk_data.head()

prk_data.shape

prk_data.describe()

prk_data.info

prk_data.shape

prk_data.isnull().sum()

sns.heatmap(prk_data.corr(),cmap='YlGnBu')
plt.show()

prk_data.isnull().sum()

prk_data['status'].value_counts()

"""1 -> With Parkinson

0 -> Without Parkinson
"""

prk_data.groupby('status').mean()

X = prk_data.drop(columns=['name','status'],axis=1)
Y = prk_data['status']

print(X.shape)

print(Y.shape)

print(X)

print(Y)

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X=standardized_data

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.3,stratify=Y,random_state=2)

print(X.shape,Y.shape,X_train.shape,X_test.shape,Y_train.shape,Y_test.shape)

classifier = svm.SVC(kernel='linear')
classifier.fit(X_train,Y_train)

X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)

print('Accuracy score of the training data  =  ',training_data_accuracy)

X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of the test data = ',test_data_accuracy)

input_data = list(map(float, input('Enter the data: ').split(',')))
std_data = scaler.transform(np.array(input_data).reshape(1, -1))
prediction = classifier.predict(std_data)
print('Has Parkinsons' if prediction[0] == 1 else 'No Parkinsons')

"""Model Training using Naive Bayes"""

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()

model.fit(X_train,Y_train)

model.score(X_test,Y_test)

X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print(training_data_accuracy)

X_test_prediction = model.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print(testing_data_accuracy)

input_data = list(map(float, input('Enter the data: ').split(',')))
std_data = np.array(input_data).reshape(1, -1)
prediction = model.predict(std_data)
print('Has Parkinsons' if prediction[0] == 1 else 'No Parkinsons')

"""Model Training using Logistic Regression"""

LRmodel = LogisticRegression()
LRmodel.fit(X_train,Y_train)

X_train_prediction = LRmodel.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print(training_data_accuracy)

X_test_prediction = LRmodel.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print(testing_data_accuracy)

input_data = list(map(float, input('Enter the data: ').split(',')))
std_data = np.array(input_data).reshape(1, -1)
prediction = LRmodel.predict(std_data)
print('Has Parkinsons' if prediction[0] == 1 else 'No Parkinsons')

"""Model Training using KNN"""

scaler = StandardScaler()
scaler.fit(X)
X=scaler.transform(X)
print(X)

from sklearn.neighbors import KNeighborsClassifier

KNNClassifier = KNeighborsClassifier(n_neighbors=5)
KNNClassifier.fit(X_train,Y_train)

X_train_prediction = KNNClassifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction,Y_train)
print(training_data_accuracy)

X_test_prediction = KNNClassifier.predict(X_test)
testing_data_accuracy = accuracy_score(X_test_prediction,Y_test)
print(testing_data_accuracy)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(Y_test,KNNClassifier.predict(X_test)))

print(confusion_matrix(Y_test,KNNClassifier.predict(X_test)))

"""KNN Classifier"""

classifier = KNeighborsClassifier()

classifier.fit(X,Y)

predictions = classifier.predict([[119.99200,157.30200,74.99700,0.00784,0.00007,0.00370,0.00554,0.01109,0.04374,0.42600,0.02182,0.03130,0.02971,0.06545,0.02211,21.03300,0.414783,0.815285,-4.813031,0.266482,2.301442,0.284654]])
print(predictions)

