# -*- coding: utf-8 -*-
"""MLPractical04.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R1lI_72hGlq8Cg8cByYWkoAlRthGZQPo
"""

import numpy as np
import pandas as pd

#Prompt to install Kaggle
!pip install kaggle

from google.colab import files
files.upload()  # Select and upload your Kaggle API key file (kaggle.json)

!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d thecansin/parkinsons-data-set

!unzip parkinsons-data-set.zip

prk_ds = pd.read_csv('/content/parkinsons.data')

prk_ds.info()

import seaborn as sns

sns.heatmap(prk_ds.corr(),cmap='YlGnBu')

print(prk_ds['PPE'])

import matplotlib.pyplot as plt
plt.scatter(prk_ds['MDVP:APQ'],prk_ds['PPE'],cmap='gist_rainbow',c=prk_ds['status'])
plt.xlabel('MDVP:APQ',fontsize=18)
plt.ylabel('PPE',fontsize=18)

prk_ds.shape

prk_ds.describe()

prk_ds.info()

prk_ds.isnull().sum()

X = prk_ds.drop(columns=['name','status'],axis=1)
Y = prk_ds['status']

X.info()

Y.info()

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
print(X_scaled)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X_scaled,Y,test_size=0.2,random_state=30)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(X_train,Y_train)
model.score(X_test,Y_test)

from sklearn.decomposition import PCA
# pca = PCA(0.95) retain 95% important features and give the features
pca = PCA(n_components=2)
new_pca = PCA(0.95)
X_pca = pca.fit_transform(X)
N_X_pca = new_pca.fit_transform(X)
X_pca.shape
N_X_pca.shape

new_pca.explained_variance_ratio_
# this says that 1st column has 72%important info, 2nd column has 21% and 3rd has 5% important values

new_pca.n_components_

N_X_train,N_X_test,N_Y_train,N_Y_test = train_test_split(N_X_pca,Y,test_size=0.2,random_state=2)

N_X_train.shape

model = LogisticRegression(max_iter=1000)
model.fit(N_X_train,N_Y_train)
model.score(N_X_test,N_Y_test)